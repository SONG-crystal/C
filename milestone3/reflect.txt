*****************************************************************************
                               Reflection
                             Workshop - #milestone
Full Name  : SuJung Song
Student ID#: IPC144NEE

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1.	I created three additional functions called totalMinute, sortData, nonTotalMinute. 
I convert total time form year, month, hour, and day. This is because, computer can not 
figure it out about which year-month-day has priority. There is a leap month every 4 years.
 So for comparing the appointment time, I should calculate the total time of year, month, day, hour, day.
 By converting the reservation date into minutes, it can easily compare with finding 
the total value which got less minute (which means the time was made reservation first).
 After create the totalMinute and use it, I sorted the appointment data. For sorting it 
by ordering of year-month-day, sortData function compares two values next to each other.
 The value which smaller than before (which means it has located in index-1) it, 
it switch the two values using the empty space (I created structure called temp). 
bigger value inserted in temp(structure in temporarily) the the lower value inserted in the next index. 
Then inserted the temp value(which contain the bigger value) to next index value. After then, 
now I have to organize data back to year, month, day, and hour. I created new function called nonTotalMinute.
 This function calculated and back to the year-month-day from totalMinute. 
If I did not back to y-m-d, the total minute which consists of long digits would be popped up on appointment data. 



2. I used lines from 575 to 665. This addAppointment function has almost 90 lines. 
At very first to make this code, I was stuck in print out Hour and Minute data. 
However, using nest iteration, do-while and do-while loop it works. 
We do not need to re-type the Year, Month, Day, Hour, and Minute. If I did not use nested iteration, 
I had to use more than 30 lines which starts from typing Hours to Minutes. 
Nested do-while loop checks  if (((time.hour*100+time.min < 1000) || (time.hour * 100 + time.min > 1400)) ||
 time.min % 30 != 0). If this condition is false, go to else state and checks the values again about 
year, month, day, hour, min, which are total same with the appointment date. 
If true, it means appointment timeslot is full (not available). if false, go to else state again and set flag 
(I used isDate) to 0 which can make escape the very first do-while iteration. 
There are several useful functions to help with this addAppointment function. 
 I can use findPatientIndexByPatientNumber function. This function return the value of patient index number. 
if (findPatientIndexByPatientNum(patientNumber, patient, maxP) != -1) it means, 
if the patient indext number has exist, go to next step.



3. I submitted my mildstone2 assignment one day later than the due date.
So I started mildestone3 one day later. At very first, I spent whole my time to fix some error on mildestone2.
This is because mildestone3 has deeply related with mildestone2. I went back to the function in mildestone2 and
spent two-three days for recreating the codes. After than, I started make some code for 4 new functions in ms3.
I organized my schedule for one day per each new function. However, unfortunately, I was stuck in addAppointment 
function for 2 days, and due date has one day left. At that time, I was so depressed and frustrated. 
This is because, I had a COM101 final exam (English eassay class) on Thuesday and ULI final exam on Friday.
I had to make my priority. I decided to finish ms3 on Wendesday, but I did not make it.
After then, I studied and did exam about COM101 and ULI. I started mildstone again on Friday.
After figure the problem about addAppointment function, removeAppointment function was easy to make it.
on Saterday and Sunday, I try to figure out about sorting and create three function on my own.
Finally I have done the last assignment. thanks.








